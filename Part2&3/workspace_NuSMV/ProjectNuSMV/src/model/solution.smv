--This is a comment

MODULE main
	VAR
	
		--it is ALLOWED to add arguments to the constructors of pallet and robot!!!!
		robot 	: robot(1,3, pallet1, pallet2);
		
		--Initially, the pallets are on different locations
		pallet1		: pallet(1,1, robot, TRUE, FALSE);
		--pallet1		: pallet(1,2, robot, TRUE, FALSE);
		pallet2		: pallet(5,3, robot, TRUE, FALSE);
		--pallet2		: pallet(0,3, robot, TRUE, FALSE);
	INVAR
		(pallet1.x = pallet2.x & pallet1.y = pallet2.y)	-> !(pallet1.onTopOfStack = pallet2.onTopOfStack)
	INVAR
	    !(pallet1.x = pallet2.x & pallet1.y = pallet2.y) -> (pallet1.onTopOfStack & pallet2.onTopOfStack);
	TRANS 
	    (robot.action=drop_pallet & robot.carriedPallet=p1) -> (next(pallet1.onTopOfStack = TRUE));
	TRANS 
	    (robot.action=drop_pallet & robot.carriedPallet=p2) -> (next(pallet2.onTopOfStack = TRUE));
	TRANS 
	    (!(robot.action=pick_pallet) & pallet1.x = pallet2.x & pallet1.y = pallet2.y) -> (next(pallet1.onTopOfStack)=pallet1.onTopOfStack);

	--PUT YOUR CTL/LTL SPECIFICAITONS HERE!	
	
	-- Specification 1: it is possible that in a certain point in time, pallet 2 is on top of pallet 1,
	--					and at a later point in time, the stack is reversed (pallet 1 on top of pallet 2)
	CTLSPEC
		EF (pallet1.x = pallet2.x & pallet1.y = pallet2.y & pallet1.onTopOfStack & EF (pallet1.x = pallet2.x & pallet1.y = pallet2.y & pallet2.onTopOfStack))
		
	-- Specification 2: it is not possible that pallet 1 is on top of pallet 2 and at the same time, pallet 2 is on top of pallet 1.
	LTLSPEC
		!F(pallet1.x = pallet2.x & pallet1.y = pallet2.y & pallet1.onTopOfStack & pallet2.onTopOfStack)
		
	CTLSPEC
		AG(!(pallet1.x = pallet2.x & pallet1.y = pallet2.y & pallet1.onTopOfStack & pallet2.onTopOfStack))
		
	-- Specification 3: whatever happens, the robot can always pick up pallet 1 (at some time late)
	CTLSPEC
		AG( EF(robot.carriedPallet = p1) )
		
	-- Specification 4: if at some point in time, pallet 1 is being carried
	--					and at some later time, it is no longer being carried,
	--						then the following holds:
	--						starting from t, pallet 1 remains being carried until the robot performs the action drop_pallet
	LTLSPEC		
	 	G(pallet1.beingCarried & F(!pallet1.beingCarried) -> (pallet1.beingCarried U robot.action = drop_pallet))
	 	-- ?????????? pallet 1 doesn't stopbeing carried????
	 	
	-- Specification 5: whenever the robot an pallet 1 are at the same position, pallet 1 is carried
	LTLSPEC
		G(robot.x = pallet1.x & robot.y = pallet1.y -> (robot.carriedPallet = p1 & pallet1.beingCarried))	
		
	-- Specification 6: if the robot carries pallet 1 infinitely many times and he carries pallet 2 infinitely many times,
	--					then he must also rotate clockwise infinitely many times
	LTLSPEC
        G (F (pallet1.beingCarried)) & G (F (pallet2.beingCarried)) -> G (F (robot.action = rotate_clock))
	 	
	 	
MODULE robot(initX, initY, pallet1, pallet2) --initX and initY are the initial x and y coordinates
	VAR
		x : 0..5;
		y : 0..5;
		orientation : {north, east, south, west};
		action : {moveFront, moveBack, pick_pallet, drop_pallet, rotate_clock}; 
		carriedPallet : {p1, p2, none};
		
   INVAR
		(carriedPallet != none) -> (action != pick_pallet);
	INVAR
		(carriedPallet = none) -> (action != drop_pallet);
	INVAR
		allowedToMoveForward -> (action != pick_pallet);
	INVAR
	    !allowedToMoveForward -> (action != moveFront);
	INVAR
	   !allowedToMoveBackward -> (action != moveBack); 
	
	
	
	ASSIGN
		init(x) := initX;
		init(y) := initY;
		init(carriedPallet) := none;
--		init(action) := no_action;
	
--	next(action) :=
--			case
--				isCarryingPallet :
--					case
--						allowedToMoveForward :
--							case
--								allowedToMoveBackward: {moveFront, moveBack, drop_pallet, rotate_clock} ;
--								TRUE: { moveFront, drop_pallet,rotate_clock} ;
--							esac;
--						!allowedToMoveForward:
--							case
--								allowedToMoveBackward: {moveBack, drop_pallet, rotate_clock} ;
--								TRUE: { drop_pallet, rotate_clock};
--							esac;
--					esac;
--				!isCarryingPallet :
--					case 
--						allowedToMoveForward:
--							case 
--								allowedToMoveBackward:	 {moveFront, moveBack, rotate_clock} ;
--								TRUE: {moveFront, rotate_clock} ;
--							esac;
--						!allowedToMoveForward: 
--							case 
--								allowedToMoveBackward: {pick_pallet, moveBack, rotate_clock};
--								TRUE: {pick_pallet, rotate_clock};
--							esac;
--					esac;
--			esac; 
		
		next(x) := 
			case 
	 			action = moveFront: x_in_front;
	 			action = moveBack: x_behind;
	 			TRUE: x;
	 		esac;
		next(y) := 
			case
				action = moveFront: y_in_front;
	 			action = moveBack: y_behind;
	 			TRUE: y;
	 		esac;
		next(orientation) := 
				case
					action = rotate_clock & orientation = north: east;
					action = rotate_clock & orientation = east: south;
					action = rotate_clock & orientation = south: west;
					action = rotate_clock & orientation = west: north;
					TRUE: orientation;
				esac;
		next(carriedPallet) := 
			case 
				action = pick_pallet & palletInFront = p1: p1;
				action = pick_pallet & palletInFront = p2: p2;
				action = drop_pallet: none;
				TRUE: carriedPallet;
			esac;
				
	DEFINE
		x_in_front :=
				case 
					orientation = east : (( x + 1 ) mod 6);
					orientation = west: ((x - 1 + 6) mod 6);
					TRUE: x;
				esac;
		y_in_front :=
				case
					orientation = north: (( y + 1 ) mod 6);
					orientation = south: ((y - 1 + 6) mod 6);
					TRUE: y;
				esac;
		x_behind :=
				case
					orientation = east : (( x - 1 + 6) mod 6);
					orientation = west: ((x + 1) mod 6);
					TRUE: x;
				esac;
		y_behind :=
				case
					orientation = north : (( y - 1 + 6) mod 6);
					orientation = south: ((y + 1) mod 6);
					TRUE: y;
				esac;			
		allowedToMoveForward := 
				case
					x_in_front = pallet1.x & y_in_front = pallet1.y : FALSE;
					x_in_front = pallet2.x & y_in_front = pallet2.y : FALSE;
					TRUE: TRUE;
				esac;
		allowedToMoveBackward :=
				case
					x_behind = pallet1.x & y_behind = pallet1.y : FALSE;
					x_behind = pallet2.x & y_behind = pallet2.y : FALSE;
					TRUE: TRUE;
				esac;
		isCarryingPallet :=
			case
				carriedPallet = p1 : TRUE;
				carriedPallet = p2: TRUE;
				TRUE: FALSE;
			esac;
		palletInFront := 
			case
				pallet1.x = x_in_front & pallet1.y = y_in_front & pallet1.onTopOfStack: p1;
				pallet2.x = x_in_front & pallet1.y = y_in_front & pallet2.onTopOfStack: p2;
				TRUE: none;
			esac;			
				
				
				
MODULE pallet(initX,initY, robot, initOnTopOfStack, initBeingCarried) --initX and initY are the initial x and y coordinates
	VAR
		x : 0..5;
		y : 0..5;
		onTopOfStack: boolean;
		beingCarried: boolean;
	ASSIGN
		init(x) := initX;
		init(y) := initY;
		init(onTopOfStack) := initOnTopOfStack;
		init(beingCarried) := initBeingCarried;
		
		next(x) := 
			case
				robot.action = pick_pallet & onTopOfStack & thisPalletInFrontOfRobot: robot.x;
				robot.action = drop_pallet & beingCarried : robot.x_in_front;
				robot.action = moveFront & beingCarried: robot.x_in_front;
				robot.action = moveBack & beingCarried: robot.x_behind;
				TRUE: x;
			esac;
		next(y) :=
			case
				robot.action = pick_pallet & onTopOfStack & thisPalletInFrontOfRobot: robot.y;
				robot.action = drop_pallet & beingCarried: robot.y_in_front;
				robot.action = moveFront & beingCarried: robot.y_in_front;
				robot.action = moveBack & beingCarried: robot.y_behind;
				TRUE: y;
			esac;
		next(onTopOfStack) :=
			case
				!onTopOfStack & robot.action = pick_pallet
					& robot.x_in_front = x & robot.y_in_front = y: TRUE;
				onTopOfStack & robot.action = pick_pallet 
					& robot.x_in_front = x & robot.y_in_front = y: TRUE;
				beingCarried & robot.action = drop_pallet: TRUE;
				!beingCarried & robot.action = drop_pallet
					 & robot.x_in_front = x & robot.y_in_front = y: FALSE;
				TRUE: onTopOfStack;
			esac;
		next(beingCarried) :=
			case
				!beingCarried & onTopOfStack & robot.action = pick_pallet 
					& robot.x_in_front = x & robot.y_in_front = y: TRUE;
				beingCarried & robot.action = drop_pallet: FALSE;
				TRUE: beingCarried;
			esac;	
	DEFINE
		thisPalletInFrontOfRobot :=
			case 
				x = robot.x_in_front & y = robot.y_in_front: TRUE;
				TRUE: FALSE;
			esac;
		
		
		
		
		
