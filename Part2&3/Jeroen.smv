--This is a comment

MODULE main
	VAR
	
		--it is ALLOWED to add arguments to the constructors of pallet and robot!!!!
		robot 	: robot(1,3,pallet1,pallet2);
		
		--Initially, the pallets are on different locations
		pallet1		: pallet(1,1,1,robot);
		pallet2		: pallet(5,3,2,robot);
	
	INVAR
	    (pallet1.location = pallet2.location) -> !(pallet1.on_top=pallet2.on_top);
	INVAR
	    !(pallet1.location = pallet2.location) -> (pallet1.on_top & pallet2.on_top);
	TRANS 
	    (robot.action=drop_pallet & robot.carried=1) -> (next(pallet1.on_top));
	TRANS 
	    (robot.action=drop_pallet & robot.carried=2) -> (next(pallet2.on_top));

	--PUT YOUR CTL/LTL SPECIFICAITONS HERE!		

MODULE robot(initX, initY, pal1, pal2) --initX and initY are the initial x and y coordinates
	VAR
		x : 0..5;
		y : 0..5;
		orientation : {north, east, south, west};
		action : {moveFront, moveBack, pick_pallet, drop_pallet, rotate_clock};
		carried : 0..2;
		
	ASSIGN
					
		init(x) := initX;
		init(y) := initY;
		init(carried) :=
			case
				location=pal1.location : 1;
				location=pal2.location : 2;
				TRUE : 0;
			esac;
	    next(x) := 	
            case
			    action=moveFront : front_x;
			    action=moveBack : back_x;
			    TRUE: x; 
		    esac;
		next(y) :=
	        case
			    action=moveFront : front_y;
			    action=moveBack : back_y;
			    TRUE: y;
     		esac;
     	next(carried) :=
	        case
			    action=pick_pallet & pal1.location=front_location & pal1.on_top: 1;
			    action=pick_pallet & pal1.location=front_location & pal1.on_top: 2;
			    action=drop_pallet: 0;
			    TRUE: carried; 
		    esac;
		next(orientation) := 
			case
				action = rotate_clock : next_orientation;
				TRUE : orientation;
			esac;
			
	INVAR 
	    !can_move_front -> !(action=moveFront);
	INVAR 
	    !can_move_back -> !(action=moveBack);
	INVAR 
	    pallet_front=0 -> !(action=pick_pallet);
	INVAR 
	    carried=0 -> !(action=drop_pallet);
	INVAR 
	    !(carried=0) -> !(action=pick_pallet);

	DEFINE
		
		location := y + 10 * x;
		front_x :=
		    case
                orientation = east : ((x + 1) mod 6);
			    orientation = west : ((x - 1 + 6) mod 6);
			    TRUE : x;
		    esac;
		front_y :=
		    case
		        orientation = south : ((y - 1 + 6) mod 6);
				orientation = north : ((y + 1) mod 6);
				TRUE : y;
			esac;
		front_location := front_y + 10 * front_x;
		back_x :=
		    case
                orientation = east : ((x - 1 + 6) mod 6);
			    orientation = west : ((x + 1) mod 6);
			    TRUE : x;
		    esac;
		back_y :=
		    case
		        orientation = south : ((y + 1) mod 6);
				orientation = north : ((y - 1 + 6) mod 6);
				TRUE : y;
			esac;
		back_location := back_y + 10 * back_x;
		next_orientation := 
			case
				orientation = north : east;
				orientation = east : south;
				orientation = south : west;
				orientation = west : north;
			esac;
		can_move_front :=
		  	case
				pallet_front = 0 : TRUE;
				TRUE : FALSE;
			esac;
		--pallet that is in front of the robot and on the top of its stack
		pallet_front :=
			case
				front_location=pal1.location & pal1.on_top : 1;
				front_location=pal2.location & pal2.on_top : 2;
				TRUE: 0;
			esac;
		can_move_back :=
			case
				back_location=pal1.location|back_location=pal2.location : FALSE;
				TRUE : TRUE;
			esac;
			

MODULE pallet(initX,initY,id,bot) --initX and initY are the initial x and y coordinates
	VAR
		x : 0..5;
		y : 0..5;
		on_top : boolean;
		
	ASSIGN
		init(x) := initX;
		init(y) := initY;
		next(x) :=
			case
				bot.action=pick_pallet & bot.front_location=location & on_top : bot.x;
	            bot.action=drop_pallet & bot.carried=id : bot.front_x;
	            !(bot.action=drop_pallet) & bot.carried=id : next(bot.x);
	            TRUE : x;
			esac;
		next(y) :=
			case
				bot.action=pick_pallet & bot.front_location=location & on_top : bot.y;
	            bot.action=drop_pallet & bot.carried=id : bot.front_y;
	            !(bot.action=drop_pallet) & bot.carried=id : next(bot.y);
	            TRUE : y;
			esac;
		
	DEFINE
	
		location := y + 10 * x;
		
		
		
		
