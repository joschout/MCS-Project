/** 
* Skeleton for the second part of the project. 
*
* No names in this skeleton can be changed, you can add things to the vocabulary and you should definitely add stuff to the theory. 
*/
include<LTC>

LTCvocabulary warehousevoc{
	type Time isa nat
	Start: Time
	partial Next(Time):Time

	type pallet
	type action constructed from {rotateRight, rotateLeft, moveFront, moveBack, pickUp(pallet), putDown(pallet)}	
	execute(Time,action)

	on(Time,pallet,pallet)
	carried(Time,pallet)

	type xco isa nat
	type yco isa nat	
	type location constructed from {grid(xco,yco)}
	inaccessible(location)
	robotposition(Time): location
	position(Time,pallet): location
	
	type dir constructed from {north, east, south, west}
	facing(Time): dir
    partial clockwiseTurn(dir):dir
    partial counterClockwiseTurn(dir):dir
    
	
	type height isa nat
	ceiling: height
    
    //function which maps a pallet to its height
    heightOf(Time, pallet): height
    
    C_Facing(Time, dir)
    C_NFacing(Time, dir)
    I_Facing(dir)
    
    C_Robotposition(Time, location)
    C_NRobotposition(Time, location)
    I_Robotposition(location)
    
    
    C_Carried(Time, pallet)
    C_NCarried(Time,pallet)
    I_Carried(pallet)
    
    C_On(Time, pallet, pallet)
    C_NOn(Time, pallet, pallet)
    I_On(pallet, pallet)
    
    C_Position(Time, pallet, location)
    C_NPosition(Time, pallet, location)
    I_Position(pallet, location)
    
    type dif isa int
    partial moveXWhenFacing(dir): dif
    partial moveYWhenFacing(dir): dif
    
    locationInFront(Time):location
    locationBehind(Time):location
}

theory solution: warehousevoc{
    
    /**** TIME THEORY****/
    {
        Start = MIN[:Time].
        !t : Next(t) = t + 1 <- Time(t +1).
    }
    
    
    ! t [Time] : ?=<1 a[action]: execute(t, a).
    
    

/************************ The static predicates from the 1st part *************************/
            
/*** the pallets ***/
    // at each moment, there is at most one pallet carried by the robot
    ! t [Time]: ?=<1 p1 [pallet] : carried(t,p1).
    
    // at each moment, if a pallet is being carried, then there is no pallet above or below that pallet
    ! t [Time] p1 [pallet]: carried(t,p1) => ~? p2 [pallet] : on(t, p2, p1)|on(t, p1,p2).
    
    //  at each moment, there is can be at most one pallet on top of a pallet
    ! t [Time] p1 [pallet]: ?=<1 p2 [pallet]: on(t, p1, p2).
    
    //  at each moment, there can be at most one pallet below a pallet
    ! t [Time] p1 [pallet]: ?=<1 p2 [pallet]: on(t, p2, p1).
    
    // at each moment, for all pallets, there cannot be a pallet which is at the same time below and above that pallet
    ! t [Time] p1 , p2 [pallet]: ~(on(t,p1,p2)&on(t,p2,p1)).
    
    // at each moment, a pallet cannot be on top of itself
    ! t [Time] p1 [pallet]: ~on(t,p1,p1).
    
    //  at each moment, if a location is inaccessible, then there cannot be pallet positioned at that location
    ! t [Time] l1 [location]: inaccessible(l1) => ~? p1 [pallet]: position(t,p1) = l1.
    
    /* at each moment, the height of a pallet is at least 1 (on the ground or being carried)
     and the heigth of a pallet is at most the height of the ceiling */
    ! t [Time] p1 [pallet] : 1 =< heightOf(t,p1) & heightOf(t,p1) =< ceiling.
    
    // at each moment, a pallet is being carried if and only if its position is the robot's postion
    ! t [Time] p1 [pallet]: carried(t,p1) <=> position(t,p1) = robotposition(t).
       
    
/*** the robot ***/
    // at each moment, the robot always faces exactly one direction
     ! t [Time]: ?1 d [dir]: facing(t) = d.
    
    // at each moment, if a location is inaccessible, then the robot cannot stand on that location
    ! t [Time] l1 [location]: inaccessible(l1) => robotposition(t) ~= l1.
    
    // at each moment, there cannot be a pallet on the robot's position if it isn't carried
	! t [Time] l1 [location] : (robotposition(t) = l1)=> ~(? p1 [pallet]: 	             position(t,p1) = l1 & ~carried(t,p1)).    
    
    
/*** height ***/
    //at each moment, if two different pallets have the same position, then they cannot have the same height
    ! t [Time] p1 [pallet] p2 [pallet]: heightOf(t,p1)~=heightOf(t,p2) <= position(t,p1) = position(t,p2) &p1 ~= p2.
   
    // height is inductively defined
    {
     //if a pallet is being carried, then it must have a height of 1
     ! t [Time] p1 [pallet]: heightOf(t,p1) = 1  <- carried(t,p1).
     
     /* for all pallets p1: if there isn't a pallet below p1 and if p1 isn't being carried, then the height of p1 is 1. This is a base case which defines the height for pallets lying on the ground.       
        */
     ! t [Time] p1 [pallet]: heightOf(t,p1)= 1<- (~? p2 [pallet]: on(t,p2, p1)&~carried(t,p1)).  
        
     // if pallet 2 is on top of pallet 1, then pallet 2 has a height which is 1 higher
     ! t [Time] p1, p2 [pallet]: heightOf(t,p1) = heightOf(t,p2)+1 <- on(t,p2,p1). 
  
    }
    
/************************** The second part *************************/

    
/* Inductive definition of locationInFront and locationBehind */
 /*   {
        ! x [xco] y [yco] t [Time] d [dir]:
    locationInFront(t) = grid(x+moveXWhenFacing(d), y + moveYWhenFacing(d))<- robotposition(t) = grid(x, y)& facing(t) = d.
    ! x [xco] y [yco] t [Time] d [dir]: locationBehind(t) = grid(x-moveXWhenFacing(d), y - moveYWhenFacing(d))<- robotposition(t) = grid(x, y)& facing(t) = d.
    }*/
    
        {
        ! t[Time] x[xco] y[yco]:
        locationInFront(t) = grid(x,y+1) <-
        facing(t) = north & robotposition(t) = grid(x,y).

        ! t[Time] x[xco] y[yco]:
        locationInFront(t) = grid(x+1,y) <-
        facing(t) = east & robotposition(t) = grid(x,y).

        ! t[Time] x[xco] y[yco]:
        locationInFront(t)= grid(x,y-1) <-
        facing(t) = south & robotposition(t) = grid(x,y).

        ! t[Time] x[xco] y[yco]:
        locationInFront(t) = grid(x-1,y) <-
        facing(t) = west & robotposition(t) = grid(x,y).
    }
    
        {
        ! t[Time] x[xco] y[yco]:
        locationBehind(t)=grid(x,y-1) <-
        facing(t) = north & robotposition(t) = grid(x,y).

        ! t[Time] x[xco] y[yco]:
        locationBehind(t)=grid(x-1,y) <-
        facing(t) = east & robotposition(t) = grid(x,y).

        ! t[Time] x[xco] y[yco]:
        locationBehind(t)=grid(x,y+1) <-
        facing(t) = south & robotposition(t) = grid(x,y).

        ! t[Time] x[xco] y[yco]:
        locationBehind(t)=grid(x+1,y) <-
        facing(t) = west & robotposition(t) = grid(x,y).
    }
    
    
    
/*** FACING ***/
    //Inertia
    {
        // for all directions d: if d is the initial direction, then the robot facesd at time o
       ! d [dir]: facing(0)=d <-I_Facing(d).
        // if there is a cause for the robot to change its direction to d at time t, the robot will be facing d at time Next(t)
       ! d [dir] t [Time]: facing(Next(t))= d <- C_Facing(t,d).
       ! d [dir] t [Time]: facing(Next(t))=d <- facing(t)=d &~C_NFacing(t,d).
    }
    //Causes
    {
      ! t [Time] d, d2 [dir]: C_NFacing(t,d) <- C_Facing(t,d2) & d~=d2.
     
      ! t [Time]: C_Facing(t,clockwiseTurn(facing(t))) <- execute(t,rotateRight) .
      ! t [Time]: C_Facing(t,counterClockwiseTurn(facing(t))) <- execute(t,rotateLeft).
      ! d[dir]: I_Facing(d) <- facing(0) = d.
    }
    
    
/*** MOVING ***/
    //Inertia
    {
       ! l [location]: robotposition(0)=l <- I_Robotposition(l).
       ! t [Time] l [location]: robotposition(Next(t))=l <- C_Robotposition(t,l).
       ! t [Time] l [location]: robotposition(Next(t))=l <- (robotposition(t)=l) & ~C_NRobotposition(t,l).        
    }
    //Causes
    {
        ! t [Time] l1, l2 [location]: C_NRobotposition(t,l1) <- C_Robotposition(t,l2) & l1 ~=l2.
        /******************************************************************************************************Not sure if this works*********************************************************************************************************************************/
        ! t [Time] : C_Robotposition(t, locationInFront(t)) <- execute(t,moveFront).
        ! t [Time] : C_Robotposition(t, locationBehind(t)) <- execute(t,moveBack).
        ! l [location] : I_Robotposition(l) <- robotposition(0) = l.
    }
    
/*** CARRYING ***/
    
    //Preconditions
    
    ! t [Time] p [pallet]: execute(t, pickUp(p)) => position(t, p) = locationInFront(t) & ~?p2 [pallet]: on(t, p, p2).
    ! t [Time] p [pallet]: execute(t, putDown(p)) => carried(t, p). //Location misschien bijvoegen
    
    //Inertia
    {
        ! p [pallet]: carried(0,p) <- I_Carried(p).
        ! t [Time] p [pallet]: carried(Next(t), p) <- C_Carried(t, p).
        ! t [Time] p [pallet]: carried(Next(t), p) <- carried(t,p) & ~C_NCarried(t,p).
    }
    //Causes
    {
        ! t [Time] p [pallet]: C_Carried(t,p) <- execute(t, pickUp(p)).
        ! t [Time] p [pallet]: C_NCarried(t,p) <- execute(t, putDown(p)).
        ! p [pallet]: I_Carried(p) <- carried(0,p).        
    }
    
    
/*** ON ***/
    //Inertia
    {
        ! p1, p2 [pallet]: on(0, p1, p2) <- I_On(p1,p2).
     	! t [Time] p1, p2 [pallet]: on(Next(t), p1, p2) <- C_On(t,p1,p2).
     	! t [Time] p1, p2 [pallet]: on(Next(t), p1,p2) <- on(t,p1,p2) & ~C_NOn(t,p1,p2).
    }
    //Causes
    
    {
     	! t [Time] p1, p2 [pallet]: C_On(t, p1, p2) <- execute(t, putDown(p2)) & (locationInFront(t) = position(t, p1)).// & ~?p3 [pallet] : on(t, p1, p3).
        ! t [Time], p1, p2 [pallet]: C_NOn(t, p1, p2) <- execute(t, pickUp(p2)).
        ! p1,p2 [pallet]: I_On(p1,p2) <- on(0, p1, p2).
    }
/*** POSITION ***/
    //Inertia
    {
        ! p [pallet] l [location]:position(0, p) = l <- I_Position(p, l).
        ! t [Time] p [pallet] l [location]: position(Next(t), p) = l <- C_Position(t, p, l).
        ! t [Time] p [pallet] l [location]: position(Next(t), p) = l <- position(t, p) = l & ~C_NPosition(t, p, l).
    }
    //Causes
    {
        ! t [Time] p [pallet]: C_Position(t, p, robotposition(t)) <- execute(t, pickUp(p)).
        ! t [Time] p [pallet]: C_Position(t, p, locationInFront(t)) <- execute(t, putDown(p)).
        ! t [Time] p [pallet] l [location]: C_Position(t, p, l) <- C_Robotposition(t, l) & carried(t, p).
        
        ! t [Time] p [pallet]: C_NPosition(t, p, position(t,p)) <- execute(t, pickUp(p)).
        ! t [Time] p [pallet]: C_NPosition(t, p, position(t,p)) <- execute(t, putDown(p)).
        ! t [Time] p [pallet] l [location]: C_NPosition(t, p, l) <- C_NRobotposition(t, l) & carried(t, p).
        
        ! p [pallet] l [location]: I_Position(p, l) <- position(0, p) = l.
    }
    

    
}


theory verification1: warehousevoc{
	//Verify something here
}

procedure verification1proc(struc){
	//Do something here: verify verification1 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

theory verification2: warehousevoc{
	//Verify something here
}

procedure verification2proc(struc){
	//Do something here: verify verification2 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}

theory verification3: warehousevoc{
	//Verify something here
}

procedure verification3proc(struc){
	//Do something here: verify verification3 in the context of structure struc. 
	//At least print whether the verification is satisified or not.
}


procedure allVerifications(){
	strucToCheck = verStruc
	verification1proc(strucToCheck)
	verification2proc(strucToCheck)
	verification3proc(strucToCheck)
}


structure verStruc:warehousevoc{
	Time = {0..16}
	Start = 0
	Next = {0->1;1->2;2->3;3->4;4->5;5->6;6->7;7->8;8->9;9->10;10->11;11->12;12->13;13->14;14->15;15->16}
	xco={1..3}
	yco={1..3}
	height = {0..3}
	pallet={p1;p2}
	inaccessible={grid(3,2);grid(2,2)}
	ceiling = 3
    clockwiseTurn = {north()->east();east()->south();south()->west();west()->north()}
    counterClockwiseTurn = {"north"->"west"; "west"->"south";"south"->"east";"east"->"north"}
    moveXWhenFacing = {north()->0; east()->1;south()->0;west()->-1 }
    moveYWhenFacing = {north()->1; east()->0;south()->-1;west()->0 }
    
}


procedure main(){
    //Depending on what you wish to do, execute one of the following methods:
    print("Main")
	 
    //This method (defined in the instances.idp) checks some given worlds for consistency
	check()

    //This method lets you walk through your solutions interactively
	//simulate_interactive(solution,verStruc)
	
    //This method walks randomly trough the solutions, 5 steps deep
	//simulate_random(solution,verStruc,5)
	
    //This method (defined above) simply searches models of your theory
	//stdoptions.nbmodels=5 //Find 5 models	
	//printmodels(modelexpand(solution,verStruc))
	
}
