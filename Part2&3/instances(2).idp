//include "../modeloplossing/solution.idp" //put your solution here

procedure check(){
	structures = { 
		{NotOK1, 	"NotOK1",	0},
		{NotOK2, 	"NotOK2",	0},
		{NotOK3, 	"NotOK3",	0},
		{NotOK4, 	"NotOK4",	0},
		{NotOK5, 	"NotOK5",	0},		
		{NotOK6, 	"NotOK6",	0},
		{Sat,		"Sat",		1},
	}
		
	for i = 1, #structures do
		local current = structures[i]
		local struc=current[1]
		local name = current[2]
		local nbExpectedModels = current[3]
		verify(solution, struc, name, nbExpectedModels)
	end

}

procedure verify(theo, struc, name, nbExpectedModels){
	stdoptions.nbmodels = nbExpectedModels + 1
	local sols = modelexpand(theo, struc)
	if #sols > nbExpectedModels then
		print(">>>verification of "..name.." failed! Found too much models!")
		print("At least one of the following is an unexpected model:")
		printmodels(sols)
		return
	end
	if #sols < nbExpectedModels then
		print(">>>verification of "..name.." failed! Found too few models!")
		return
	end
	print(">>>verification of "..name.." succesful! ")
}



//pallet carrying two pallets
structure NotOK1:warehousevoc{
	Time = {0..3}
	Start = 0
	Next = {0->1;1->2;2->3;}
	
	xco={1..3}
	yco={1..3}
	height = {0..3}
	pallet ={p1;p2;p3}
	inaccessible={grid(1,3);grid(2,2)}
	position<ct> ={1,p1->grid(1,1); 1,p2->grid(1,1); 1,p3->grid(1,1)}
	on<ct>={(1,p2,p1); (1,p3,p1)}
	robotposition<ct> = {1->grid(3,3)}
	ceiling = 3
}


//loop in stack
structure NotOK2:warehousevoc{
	Time = {0..3}
	Start = 0
	Next = {0->1;1->2;2->3;}
	
	xco={1..3}
	yco={1..3}
	height = {0..3}
	pallet={p1;p2;p3}
	on<ct> ={(1,p1,p2);(1,p2,p3);(1,p3,p1)}
}

//Bad pickup
structure NotOK3:warehousevoc{
	Time = {0..3}
	Start = 0
	Next = {0->1;1->2;2->3;}
	xco={1..3}
	yco={1..3}
	height = {0..3}
	pallet={p1;p2}
	
	carried<cf> = {1,p1}
	carried<ct> = {2,p1}
	execute<cf> = {1,pickUp(p1)}
}

//Bad putdown
structure NotOK4:warehousevoc{
	Time = {0..3}
	Start = 0
	Next = {0->1;1->2;2->3;}
	xco={1..3}
	yco={1..3}
	height = {0..3}
	pallet={p1;p2}
	
	carried<cf> = {2,p1}
	carried<ct> = {1,p1}
	execute<cf> = {1,putDown(p1)}
}

//Bad rotate
structure NotOK5:warehousevoc{
	Time = {0..3}
	Start = 0
	Next = {0->1;1->2;2->3;}
	xco={1..3}
	yco={1..3}
	height = {0..3}
	pallet={p1;p2}
	
	facing<ct> = {1->south();2->south()}
	execute<ct> = {1,rotateRight()}
}

//Bad move
structure NotOK6:warehousevoc{
	Time = {0..3}
	Start = 0
	Next = {0->1;1->2;2->3;}
	xco={1..3}
	yco={1..3}
	height = {0..3}
	pallet={p1;p2}
	
	robotposition<ct> = {1->grid(1,1); 2-> grid(2,2)}
}
//unique solution
//This structure should have a unique solution (provided below)
//Note: if you introduce new predicates that are useless, you will not have uniqueness, you will have the same solution multiple times. Try to avoid this.
structure Sat:warehousevoc{
    Time = {0..9}
    Start = 0
    Next = {0->1;1->2;2->3;3->4;4->5;5->6;6->7;7->8;8->9}
	
    // input:
    // 2 x .
    // R 2 .
    // . . .
    xco={1..3}
    yco={1..3}
    height = {0..3}
    pallet ={p1;p2;p3;p4}
    inaccessible={grid(2,3)}
    position<ct>={0,p1->grid(1,3);0,p2->grid(1,3);0,p3->grid(2,2);0,p4->grid(2,2)}
    on<ct>={0,p2,p1;0,p4,p3}
    robotposition<ct>={0->grid(1,2)}
    facing<ct>={0->north()}

    ceiling = 3
    // output: robot should carry nothing, and 1,3;1,2;1,1;2,1; should be empty
// can do this as follows
//0,pickUp("p2"); 1,rotateRight; 2,putDown("p2"); 3,rotateLeft; 4,pickUp("p1"); 5,moveBack; 6,rotateRight; 7,moveFront; 8,putDown("p1")
    // . x .
    // . 3 .
    // . R 1
    carried<cf>={9,p1}
    position<cf>={
        9,p1->grid(1,3);
        9,p1->grid(1,2);
        9,p1->grid(1,1);
        9,p1->grid(2,1);
        9,p1->grid(2,2);
    }

    //On the last time, you cannot perform any actions
    execute<cf> = {9,rotateRight(); 9,rotateLeft(); 9,moveFront(); 9,moveBack(); 9,pickUp(p1)}
}
